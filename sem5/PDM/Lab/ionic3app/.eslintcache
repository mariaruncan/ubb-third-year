[{"D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\index.tsx":"1","D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\serviceWorker.ts":"2","D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\App.tsx":"3","D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\movies\\MovieList.tsx":"4","D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\movies\\MovieEdit.tsx":"5","D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\movies\\MovieProvider.tsx":"6","D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\auth\\index.tsx":"7","D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\todo\\usePhoto.ts":"8","D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\movies\\Movie.tsx":"9","D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\movies\\scooterApi.tsx":"10","D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\network\\useNetwork.tsx":"11","D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\auth\\AuthProvider.tsx":"12","D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\auth\\Login.tsx":"13","D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\auth\\PrivateRoute.tsx":"14","D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\core\\index.tsx":"15","D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\auth\\authApi.tsx":"16","D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\todo\\usePhotoGallery.ts":"17","D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\movies\\Home2.tsx":"18","D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\todo\\MyMap.tsx":"19","D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\todo\\mapsApiKey.ts":"20"},{"size":430,"mtime":1600535081000,"results":"21","hashOfConfig":"22"},{"size":5213,"mtime":1600535081000,"results":"23","hashOfConfig":"22"},{"size":1743,"mtime":1670843449653,"results":"24","hashOfConfig":"22"},{"size":5648,"mtime":1670861517547,"results":"25","hashOfConfig":"22"},{"size":6861,"mtime":1670865229563,"results":"26","hashOfConfig":"22"},{"size":12115,"mtime":1670846102843,"results":"27","hashOfConfig":"22"},{"size":89,"mtime":1602581885000,"results":"28","hashOfConfig":"22"},{"size":2800,"mtime":1670072491859,"results":"29","hashOfConfig":"22"},{"size":1229,"mtime":1670082061803,"results":"30","hashOfConfig":"22"},{"size":2230,"mtime":1667488998789,"results":"31","hashOfConfig":"22"},{"size":916,"mtime":1670864682373,"results":"32","hashOfConfig":"22"},{"size":4452,"mtime":1670845379485,"results":"33","hashOfConfig":"22"},{"size":2261,"mtime":1667389721118,"results":"34","hashOfConfig":"22"},{"size":829,"mtime":1667060490317,"results":"35","hashOfConfig":"22"},{"size":850,"mtime":1667043605447,"results":"36","hashOfConfig":"22"},{"size":387,"mtime":1667053349535,"results":"37","hashOfConfig":"22"},{"size":3051,"mtime":1670864682373,"results":"38","hashOfConfig":"22"},{"size":2143,"mtime":1670843255035,"results":"39","hashOfConfig":"22"},{"size":1253,"mtime":1670861769092,"results":"40","hashOfConfig":"22"},{"size":69,"mtime":1670862107145,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1sz5bh4",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"44"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\index.tsx",[],["93","94"],"D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\serviceWorker.ts",[],"D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\App.tsx",["95"],"import React from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport { IonApp, IonRouterOutlet } from '@ionic/react';\r\nimport { IonReactRouter } from '@ionic/react-router';\r\n\r\n/* Core CSS required for Ionic components to work properly */\r\nimport '@ionic/react/css/core.css';\r\nimport './css/Movie.css'\r\n/* Basic CSS for apps built with Ionic */\r\nimport '@ionic/react/css/normalize.css';\r\nimport '@ionic/react/css/structure.css';\r\nimport '@ionic/react/css/typography.css';\r\n\r\n/* Optional CSS utils that can be commented out */\r\nimport '@ionic/react/css/padding.css';\r\nimport '@ionic/react/css/float-elements.css';\r\nimport '@ionic/react/css/text-alignment.css';\r\nimport '@ionic/react/css/text-transformation.css';\r\nimport '@ionic/react/css/flex-utils.css';\r\nimport '@ionic/react/css/display.css';\r\n\r\n/* Theme variables */\r\nimport './theme/variables.css';\r\nimport { AuthProvider, Login, PrivateRoute } from './auth';\r\nimport {MovieProvider} from \"./movies/MovieProvider\";\r\nimport MovieList from \"./movies/MovieList\";\r\nimport MovieEdit from \"./movies/MovieEdit\";\r\nimport Home from \"./movies/Home\";\r\n\r\nconst App: React.FC = () => (\r\n  <IonApp>\r\n    <IonReactRouter>\r\n      <IonRouterOutlet>\r\n        <AuthProvider>\r\n          <Route path=\"/\" component={Login} exact={true}/>\r\n          <MovieProvider>\r\n            <PrivateRoute path=\"/items\" component={MovieList} exact={true}/>\r\n            <Route path=\"/photos\" component={Home} exact={true}/>\r\n            <PrivateRoute path='/items/:id' component={MovieEdit} />\r\n            <PrivateRoute path='/items/add' component={MovieEdit} />\r\n          </MovieProvider>\r\n        </AuthProvider>\r\n      </IonRouterOutlet>\r\n    </IonReactRouter>\r\n  </IonApp>\r\n);\r\n\r\nexport default App;\r\n","D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\movies\\MovieList.tsx",["96","97","98","99","100","101","102","103"],"import {\r\n    IonButton,\r\n    IonButtons,\r\n    IonContent,\r\n    IonFab,\r\n    IonFabButton,\r\n    IonHeader, IonIcon, IonInfiniteScroll, IonInfiniteScrollContent,\r\n    IonList,\r\n    IonLoading,\r\n    IonPage, IonSearchbar, IonSelect, IonSelectOption,\r\n    IonTitle,\r\n    IonToolbar\r\n} from '@ionic/react';\r\nimport React, {useContext, useEffect, useState} from \"react\";\r\nimport {RouteComponentProps} from \"react-router\";\r\nimport {add} from \"ionicons/icons\";\r\nimport {getLogger} from \"../core\";\r\nimport {MovieContext} from \"./MovieProvider\";\r\nimport Movie from \"../movies/Movie\";\r\nimport {useNetwork} from \"../network/useNetwork\";\r\nimport {AuthContext} from \"../auth\";\r\nimport {Plugins} from \"@capacitor/core\";\r\nimport {Photo, usePhotoGallery} from \"../todo/usePhotoGallery\";\r\n\r\nconst log = getLogger('MovieList');\r\nconst MovieList: React.FC<RouteComponentProps> = ({history}) => {\r\n    const {movies, fetching, fetchingError, fetchMovies, resetLogout} = useContext(MovieContext);\r\n    const {photos, takePhoto, deletePhoto} = usePhotoGallery();\r\n    const [searchMovies, setSearchMovies] = useState<string>('');\r\n    const {isAuthenticated, logout} = useContext(AuthContext);\r\n    const [languages, setLanguages] = useState<string[]>(['romana', 'english', 'default', 'franc', 'spaniola']);\r\n    const [filter, setFilter] = useState<string>(\"default\");\r\n    const [disableInfiniteScroll, setDisableInfiniteScroll] = useState<boolean>(false);\r\n    const {networkStatus} = useNetwork();\r\n\r\n    const handleLogout = () => {\r\n        if (isAuthenticated) {\r\n            resetLogout?.();\r\n            logout?.();\r\n        }\r\n    }\r\n\r\n    // useEffect(() => {\r\n    //     log(filter)\r\n    //     fetchMovies?.(filter);\r\n    // }, [filter])\r\n\r\n    function searchNext($event: CustomEvent<void>) {\r\n        fetchMovies?.(filter ? filter : \"\");\r\n        ($event.target as HTMLIonInfiniteScrollElement).complete();\r\n    }\r\n\r\n    function onSearchChanged(language: string) {\r\n        log('search ')\r\n        if (language === \"\")\r\n            language = \"default\"\r\n        setSearchMovies(language);\r\n        fetchMovies?.(language);\r\n    }\r\n\r\n    return (\r\n        <IonPage>\r\n            <IonHeader>\r\n                <IonToolbar>\r\n                    <div>Network status is {JSON.stringify(networkStatus)}</div>\r\n                    <IonButtons slot=\"end\">\r\n                        <IonButton routerLink='/' routerDirection='root' onClick={handleLogout}>\r\n                            Logout\r\n                        </IonButton>\r\n                    </IonButtons>\r\n                </IonToolbar>\r\n            </IonHeader>\r\n            <IonContent>\r\n                <IonSearchbar\r\n                    value={searchMovies}\r\n                    debounce={1000}\r\n                    onIonChange={e => onSearchChanged(e.detail.value!)}>\r\n                </IonSearchbar>\r\n                <IonSelect value={filter} placeholder=\"Select language\" onIonChange={e => setFilter(e.detail.value)}>\r\n                    {languages.map(language => <IonSelectOption key={language}\r\n                                                                value={language}>{language}</IonSelectOption>)}\r\n                </IonSelect>\r\n                <IonLoading isOpen={fetching} message=\"Fetching items\"/>\r\n                {movies && (\r\n                    <IonList>\r\n                        {movies.map(({\r\n                                         _id, name, language,\r\n                                         manager, year, userId, photoPath, lat, lng}) => {\r\n                                let photoView = \"\";\r\n                                for (let photo of photos) {\r\n                                    if (photo.filepath === photoPath) {\r\n                                        photoView = photo.webviewPath ? photo.webviewPath : \"\";\r\n                                    }\r\n                                }\r\n\r\n                                return <Movie key={_id}\r\n                                              _id={_id}\r\n                                              name={name}\r\n                                              language={language}\r\n                                              manager={manager}\r\n                                              year={year}\r\n                                              userId={userId}\r\n                                              onEdit={id => history.push(`/items/${id}`)}\r\n                                              photoPath={photoView}\r\n                                              lat={lat}\r\n                                              lng={lng}/>\r\n                            }\r\n                        )}\r\n                    </IonList>\r\n                )}\r\n                {fetchingError && (\r\n                    <div>{fetchingError.message || 'Failed to fetch items'}</div>\r\n                )}\r\n                <IonInfiniteScroll threshold=\"100px\" disabled={disableInfiniteScroll}\r\n                                   onIonInfinite={(e: CustomEvent<void>) => {\r\n                                       searchNext(e)\r\n                                   }}>\r\n                    <IonInfiniteScrollContent\r\n                        loadingText=\"Loading more good books...\">\r\n                    </IonInfiniteScrollContent>\r\n                </IonInfiniteScroll>\r\n                <IonFab vertical=\"bottom\" horizontal=\"end\" slot=\"fixed\">\r\n                    <IonFabButton onClick={() => history.push('/items/add')}>\r\n                        <IonIcon icon={add}/>\r\n                    </IonFabButton>\r\n                </IonFab>\r\n            </IonContent>\r\n        </IonPage>\r\n    );\r\n};\r\n\r\nexport default MovieList;\r\n","D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\movies\\MovieEdit.tsx",["104","105","106","107","108","109"],"import React, {useContext, useEffect, useState} from 'react';\r\nimport {\r\n    IonButton,\r\n    IonButtons,\r\n    IonContent, IonFab, IonFabButton,\r\n    IonHeader, IonIcon, IonImg,\r\n    IonInput, IonItem, IonLabel,\r\n    IonLoading,\r\n    IonPage,\r\n    IonTitle,\r\n    IonToolbar\r\n} from '@ionic/react';\r\nimport {getLogger} from '../core';\r\nimport {MovieContext} from './MovieProvider';\r\nimport {RouteComponentProps} from 'react-router';\r\nimport {MovieProps} from './MovieProps';\r\nimport {useNetwork} from \"../network/useNetwork\";\r\nimport {Plugins} from \"@capacitor/core\";\r\nimport {MyPhoto, usePhoto} from \"../todo/usePhoto\";\r\nimport {camera} from \"ionicons/icons\";\r\nimport {Photo, usePhotoGallery} from \"../todo/usePhotoGallery\";\r\nimport {MyMap} from \"../todo/MyMap\";\r\n\r\nconst log = getLogger('MovieEdit');\r\n\r\ninterface MovieEditProps extends RouteComponentProps<{\r\n    id?: string;\r\n}> {\r\n}\r\n\r\nconst MovieEdit: React.FC<MovieEditProps> = ({history, match}) => {\r\n    const { networkStatus } = useNetwork();\r\n    const {movies, saving, savingError, saveMovie} = useContext(MovieContext);\r\n    const [name, setName] = useState('');\r\n    const [language, setLanguage] = useState('');\r\n    const [manager, setManager] = useState('');\r\n    const [year, setYear] = useState('');\r\n    const [movie, setMovie] = useState<MovieProps>();\r\n    const [photoToDelete, setPhotoToDelete] = useState<MyPhoto>();\r\n    const [photoPath, setPhotoPath] = useState('');\r\n    const [photoFile, setPhotoFile] = useState('');\r\n    const [offlineText, setOfflineText] = useState(\"\");\r\n    const {photos, takePhoto, deletePhoto, loadSaved} = usePhotoGallery();\r\n    const [lat, setLat] = useState(47.29341652941491);\r\n    const [lng, setLng] = useState(24.15388570663447);\r\n    const {Storage} = Plugins;\r\n\r\n    useEffect(() => {\r\n        const routeId = match.params.id || '';\r\n        const m = movies?.find(mv => mv._id == routeId);\r\n        setMovie(m);\r\n\r\n        if (m) {\r\n            let photoView = \"\";\r\n            getPhotoView(m.photoPath).then((data) => photoView = data)\r\n            setName(m.name);\r\n            setLanguage(m.language);\r\n            setManager(m.manager);\r\n            setYear(m.year);\r\n            setPhotoPath(photoView);\r\n            setPhotoFile(m.photoPath);\r\n            setLat(m.lat);\r\n            setLng(m.lng);\r\n        }\r\n    }, [match.params.id]);\r\n\r\n    const getPhotoView = async (photoPath: string) => {\r\n        const res = await Storage.get({key: 'photo'});\r\n        let photoView = \"\";\r\n\r\n        if (res.value) {\r\n           let photosFromStorage : Photo[] = JSON.parse(res.value);\r\n            log(photosFromStorage)\r\n\r\n            for (let photo of photosFromStorage) {\r\n                if (photo.filepath === photoPath) {\r\n                    photoView = photo.webviewPath ? photo.webviewPath : \"\";\r\n                    setPhotoPath(photoView)\r\n                }\r\n            }\r\n        }\r\n        return photoView;\r\n    }\r\n\r\n    const handleSave = () => {\r\n        const mov: MovieProps = {\r\n            'photoPath': photoFile,\r\n            '_id': movie?._id,\r\n            'name': name,\r\n            'manager': manager,\r\n            'year': year,\r\n            'language': language,\r\n            'userId': '',\r\n            'lat': lat,\r\n            'lng': lng\r\n        };\r\n        const editedMovie = movie ? mov  : mov;\r\n        setMovie(editedMovie);\r\n        saveMovie?.(editedMovie);\r\n        if (!networkStatus.connected) {\r\n            log('save movie in storage')\r\n            setOfflineText(\"Your items are saved only locally\");\r\n        }\r\n    };\r\n\r\n    const setMapPosition = (e: any) => {\r\n        log('map position')\r\n        setLat(e.latLng.lat());\r\n        setLng(e.latLng.lng());\r\n    }\r\n\r\n    function mapLog(source: string) {\r\n        return (e: any) => console.log(source, e.latLng.lat(), e.latLng.lng());\r\n    }\r\n\r\n    return (\r\n        <IonPage>\r\n            <IonHeader>\r\n                <IonToolbar>\r\n                    <IonTitle>Edit</IonTitle>\r\n                    <div>Network status is {JSON.stringify(networkStatus)}</div>\r\n                    <IonButtons slot=\"end\">\r\n                        <IonButton onClick={handleSave}>\r\n                            Save\r\n                        </IonButton>\r\n                    </IonButtons>\r\n                </IonToolbar>\r\n            </IonHeader>\r\n            <IonContent>\r\n                <IonItem>\r\n                    <IonLabel>Name:</IonLabel>\r\n                    <IonInput value={name} onIonChange={e => setName(e.detail.value || '')}/>\r\n                </IonItem>\r\n                <IonItem>\r\n                    <IonLabel>Language:</IonLabel>\r\n                    <IonInput value={language} onIonChange={e => setLanguage(e.detail.value || '')}/>\r\n                </IonItem>\r\n                <IonItem>\r\n                    <IonLabel>Manager:</IonLabel>\r\n                    <IonInput value={manager} onIonChange={e => setManager(e.detail.value || '')}/>\r\n                </IonItem>\r\n                <IonItem>\r\n                    <IonLabel>Year:</IonLabel>\r\n                    <IonInput value={year} onIonChange={e => setYear(e.detail.value || '')}/>\r\n                </IonItem>\r\n                <IonItem>\r\n                    <IonImg style={{width: \"300px\", height: \"300px\", margin: \"0 auto\"}} alt={\"NO PHOTO\"}\r\n                            onClick={() => {\r\n                                setPhotoToDelete(photos?.find(vd => vd.webviewPath === photoPath))\r\n                            }}\r\n                            src={photoPath}\r\n                    />\r\n                </IonItem>\r\n                <IonItem>\r\n                    <MyMap lat={lat} lng={lng} onMapClick={setMapPosition} onMarkerClick={mapLog('onMarker')}/>\r\n                </IonItem>\r\n                <IonFab horizontal=\"end\">\r\n                    <IonFabButton size=\"small\" color=\"danger\"\r\n                                  onClick={() => {\r\n                                      const photoTaken = takePhoto();\r\n                                      photoTaken.then((data) => {\r\n                                          console.log(data)\r\n                                          let filepath = data.filepath;\r\n                                          setPhotoFile(filepath)\r\n                                          setPhotoPath(data.webviewPath!);\r\n                                      });\r\n                                  }}>\r\n                        <IonIcon icon={camera}/>\r\n                    </IonFabButton>\r\n                </IonFab>\r\n                <IonLoading isOpen={saving}/>\r\n                {savingError && (\r\n                    <div>{savingError.message || 'Failed to save item'}</div>\r\n                )}\r\n                {\r\n                    offlineText\r\n                }\r\n            </IonContent>\r\n        </IonPage>\r\n    );\r\n};\r\n\r\nexport default MovieEdit;\r\n","D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\movies\\MovieProvider.tsx",["110","111","112","113","114","115","116","117","118","119","120","121"],"import React, {useCallback, useContext, useEffect, useReducer, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {getLogger} from '../core';\r\nimport {MovieProps} from './MovieProps';\r\nimport {createMovie, getMovies, getMoviesFiltered, getMoviesPaginated, newWebSocket, updateMovie} from './movieApi';\r\nimport {AuthContext} from '../auth';\r\nimport {save} from \"ionicons/icons\";\r\nimport {Plugins} from '@capacitor/core';\r\nimport {useNetwork} from \"../network/useNetwork\";\r\nimport movie from \"./Movie\";\r\n\r\nconst log = getLogger('MovieProvider');\r\n\r\ntype SaveMovieFn = (item: MovieProps) => Promise<any>;\r\ntype FetchFN = () => void;\r\ntype FetchFilterFN = (language: string) => void;\r\n\r\nexport interface MoviesState {\r\n    movies?: MovieProps[],\r\n    fetching: boolean,\r\n    fetchingError?: Error | null,\r\n    saving: boolean,\r\n    resetLogout?: FetchFN,\r\n    fetchMovies?: FetchFilterFN,\r\n    fetchFilteredMovies?: FetchFilterFN,\r\n    savingError?: Error | null,\r\n    saveMovie?: SaveMovieFn,\r\n}\r\n\r\ninterface ActionProps {\r\n    type: string,\r\n    payload?: any,\r\n}\r\n\r\nconst initialState: MoviesState = {\r\n    fetching: false,\r\n    saving: false,\r\n};\r\n\r\nconst FETCH_ITEMS_STARTED = 'FETCH_ITEMS_STARTED';\r\nconst FETCH_ITEMS_SUCCEEDED = 'FETCH_ITEMS_SUCCEEDED';\r\nconst FETCH_ITEMS_FAILED = 'FETCH_ITEMS_FAILED';\r\nconst SAVE_ITEM_STARTED = 'SAVE_ITEM_STARTED';\r\nconst SAVE_ITEM_SUCCEEDED = 'SAVE_ITEM_SUCCEEDED';\r\nconst SAVE_ITEM_FAILED = 'SAVE_ITEM_FAILED';\r\nconst PAGE_SIZE = 10;\r\n\r\nconst reducer: (state: MoviesState, action: ActionProps) => MoviesState =\r\n    (state, {type, payload}) => {\r\n        switch (type) {\r\n            case FETCH_ITEMS_STARTED:\r\n                return {...state, fetching: true, fetchingError: null};\r\n            case FETCH_ITEMS_SUCCEEDED:\r\n                return {...state, movies: payload.items, fetching: false};\r\n            case FETCH_ITEMS_FAILED:\r\n                return {...state, fetchingError: payload.error, fetching: false};\r\n            case SAVE_ITEM_STARTED:\r\n                return {...state, savingError: null, saving: true};\r\n            case SAVE_ITEM_SUCCEEDED:\r\n                const movies = [...(state.movies || [])];\r\n                const item = payload.item;\r\n                const index = movies.findIndex(it => it._id === item._id);\r\n                if (index === -1) {\r\n                    movies.splice(0, 0, item);\r\n                } else {\r\n                    movies[index] = item;\r\n                }\r\n                return {...state, movies, saving: false};\r\n            case SAVE_ITEM_FAILED:\r\n                return {...state, savingError: payload.error, saving: false};\r\n            default:\r\n                return state;\r\n        }\r\n    };\r\n\r\n\r\nexport const MovieContext = React.createContext<MoviesState>(initialState);\r\n\r\ninterface ItemProviderProps {\r\n    children: PropTypes.ReactNodeLike,\r\n}\r\n\r\nexport const MovieProvider: React.FC<ItemProviderProps> = ({children}) => {\r\n    const [pageNumber, setPageNumber] = useState(0);\r\n    const [lastLanguage, setLastLanguage] = useState(\"default\");\r\n    const {Storage} = Plugins;\r\n    const {token} = useContext(AuthContext);\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    const {movies, fetching, fetchingError, saving, savingError} = state;\r\n    const saveMovie = useCallback<SaveMovieFn>(saveItemCallback, [token]);\r\n    const value = {movies, fetching, fetchingError, saving, savingError, saveMovie, fetchMovies};\r\n    const { networkStatus } = useNetwork();\r\n\r\n    // useEffect(() => {\r\n    //     const onUseEffect = async () => {\r\n    //         const res = await Storage.get({key: 'movies'});\r\n    //         if (!res.value) {\r\n    //             fetchMovies(\"default\");\r\n    //         } else {\r\n    //            getItemsFromStorage();\r\n    //         }\r\n    //     }\r\n    //     onUseEffect().then();\r\n    // }, [])\r\n\r\n    useEffect(() => {\r\n        fetchMovies(\"default\");\r\n    }, [])\r\n\r\n    // useEffect(() => {\r\n    //     if (networkStatus.connected) {\r\n    //         saveItemsFromStorage().then();\r\n    //     }\r\n    //\r\n    //     async function saveItemsFromStorage() {\r\n    //         const res = await Storage.get({ key: 'temporary-movies' });\r\n    //         if (res.value) {\r\n    //             const temporaryMovies = JSON.parse(res.value);\r\n    //             log('saveItemsFromStorage' + JSON.stringify(temporaryMovies))\r\n    //             temporaryMovies.forEach(function(movie: MovieProps) {\r\n    //                 saveItemCallback(movie)\r\n    //             });\r\n    //\r\n    //             await Storage.remove({ key: 'temporary-movies' });\r\n    //         }\r\n    //     }\r\n    // }, [networkStatus.connected])\r\n\r\n    useEffect(wsEffect, [token]);\r\n    log('returns ' + pageNumber);\r\n\r\n    function getItemsFromStorage() {\r\n        getMoviesFromStorage().then();\r\n        async function getMoviesFromStorage() {\r\n            try {\r\n                dispatch({type: FETCH_ITEMS_STARTED});\r\n                const res = await Storage.get({key: 'movies'});\r\n                if (res.value) {\r\n                    const items = JSON.parse(res.value);\r\n                    log(items)\r\n                    dispatch({type: FETCH_ITEMS_SUCCEEDED, payload: {items}});\r\n                }\r\n            } catch (error) {\r\n                log('fetchItems failed');\r\n                dispatch({type: FETCH_ITEMS_FAILED, payload: {error}});\r\n            }\r\n        }\r\n    }\r\n\r\n    async function saveMovieInStorage(editedMovie: MovieProps) {\r\n        const res = await Storage.get({ key: 'temporary-movies' });\r\n        if (res.value) {\r\n            let temporaryMovies = JSON.parse(res.value);\r\n            temporaryMovies.push(editedMovie)\r\n            await Storage.set({\r\n                key: 'temporary-movies',\r\n                value: JSON.stringify(temporaryMovies)\r\n            });\r\n            log('saveMovieInStorage ' + JSON.stringify(temporaryMovies))\r\n        }\r\n        else {\r\n            await Storage.set({\r\n                key: 'temporary-movies',\r\n                value: JSON.stringify([editedMovie])\r\n            });\r\n        }\r\n    }\r\n\r\n    async function saveItemCallback(item: MovieProps) {\r\n        // if (!networkStatus.connected) {\r\n        //         log('saveItemCallback not connected')\r\n        //     saveMovieInStorage(item).then();\r\n        //     return;\r\n        // }\r\n        try {\r\n            log('saveItem started');\r\n            dispatch({type: SAVE_ITEM_STARTED});\r\n            const resToken = await Storage.get({key: 'token'});\r\n            let tok =''\r\n            if (resToken.value) {\r\n                tok = resToken.value\r\n            }\r\n            const savedItem = await (item._id ? updateMovie(tok, item) : createMovie(tok, item));\r\n            console.log('saveItem   ', savedItem)\r\n            log('saveItem succeeded');\r\n            dispatch({type: SAVE_ITEM_SUCCEEDED, payload: {item: savedItem}});\r\n        } catch (error) {\r\n            log('saveItem failed');\r\n            dispatch({type: SAVE_ITEM_FAILED, payload: {error}});\r\n        }\r\n    }\r\n\r\n    function wsEffect() {\r\n        let canceled = false;\r\n        log('wsEffect - connecting');\r\n        let closeWebSocket: () => void;\r\n        if (token?.trim()) {\r\n            closeWebSocket = newWebSocket(token, message => {\r\n                if (canceled) {\r\n                    return;\r\n                }\r\n                const {type, payload: item} = message;\r\n                log(`ws message, item ${type}`);\r\n                if (type === 'created' || type === 'updated') {\r\n                    dispatch({type: SAVE_ITEM_SUCCEEDED, payload: {item}});\r\n                }\r\n            });\r\n        }\r\n        return () => {\r\n            log('wsEffect - disconnecting');\r\n            canceled = true;\r\n            closeWebSocket?.();\r\n        }\r\n    }\r\n\r\n    function fetchFilteredMovies(language: string) {\r\n        log('fetchFilteredMovies movies ' + language)\r\n        let canceled = false;\r\n        fetchItems().then();\r\n        return () => {\r\n            canceled = true;\r\n        }\r\n\r\n        async function fetchItems() {\r\n            log('fetchFilteredMovies')\r\n            const resToken = await Storage.get({key: 'token'});\r\n            if (!resToken.value) {\r\n                return;\r\n            }\r\n            try {\r\n                log('fetchFilteredMovies started paginated');\r\n                dispatch({type: FETCH_ITEMS_STARTED});\r\n\r\n                if (language != lastLanguage) {\r\n                    setPageNumber(0);\r\n                    log('set page number', pageNumber)\r\n                    await Storage.remove({key: 'movies'});\r\n                }\r\n                setLastLanguage(language);\r\n                let tok = \"\";\r\n                const resToken = await Storage.get({key: 'token'});\r\n                if (resToken.value) {\r\n                    tok = resToken.value\r\n                }\r\n                const newItems = await getMoviesFiltered(tok, language);\r\n                const res = await Storage.get({key: 'movies'});\r\n                log(newItems)\r\n                let items;\r\n                if (res.value) {\r\n                    const resJSON = JSON.parse(res.value);\r\n                    items = resJSON.concat(newItems);\r\n                } else\r\n                    items = newItems\r\n\r\n                log('fetchFilteredMovies succeeded paginated');\r\n                if (!canceled) {\r\n                    dispatch({type: FETCH_ITEMS_SUCCEEDED, payload: {items}});\r\n                    await Storage.set({key: 'movies', value: JSON.stringify(items)});\r\n                }\r\n            } catch (error) {\r\n                log('fetchFilteredMovies failed paginated');\r\n                dispatch({type: FETCH_ITEMS_FAILED, payload: {error}});\r\n            }\r\n        }\r\n    }\r\n\r\n    function fetchMovies(language: string) {\r\n        log('fetchMovies ' + language)\r\n        if (language !== 'default') {\r\n            fetchFilteredMovies(language);\r\n            return;\r\n        }\r\n        let canceled = false;\r\n        fetchItems();\r\n        return () => {\r\n            canceled = true;\r\n        }\r\n\r\n        async function fetchItems() {\r\n            const resToken = await Storage.get({key: 'token'});\r\n            if (!resToken.value) {\r\n                return;\r\n            }\r\n            try {\r\n                log('fetchItems started paginated ', language, lastLanguage);\r\n                dispatch({type: FETCH_ITEMS_STARTED});\r\n\r\n                if (language != lastLanguage) {\r\n                    setPageNumber(0);\r\n                    log('set page number', pageNumber)\r\n                    await Storage.remove({key: 'movies'});\r\n                }\r\n                setLastLanguage(\"default\");\r\n                let tok = \"\";\r\n                const resToken = await Storage.get({key: 'token'});\r\n                if (resToken.value) {\r\n                    tok = resToken.value\r\n                }\r\n\r\n                const newItems = await getMoviesPaginated(tok, pageNumber);\r\n                const res = await Storage.get({key: 'movies'});\r\n\r\n                let items = [];\r\n                if (res.value) {\r\n                    const storageItems = JSON.parse(res.value);\r\n                    //items = storageItems.concat(newItems);\r\n                    items = newItems\r\n                } else\r\n                    items = newItems\r\n               // setPageNumber(pageNumber + PAGE_SIZE)\r\n                log('page ' + pageNumber)\r\n                log('fetchItems succeeded paginated');\r\n                if (!canceled) {\r\n                    dispatch({type: FETCH_ITEMS_SUCCEEDED, payload: {items}});\r\n                    log('mov ' + JSON.stringify(items))\r\n                    await Storage.set({key: 'movies', value: JSON.stringify(items)});\r\n                }\r\n            } catch (error) {\r\n                log('fetchItems failed paginated');\r\n                dispatch({type: FETCH_ITEMS_FAILED, payload: {error}});\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <MovieContext.Provider value={value}>\r\n            {children}\r\n        </MovieContext.Provider>\r\n    );\r\n};","D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\auth\\index.tsx",[],"D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\todo\\usePhoto.ts",[],["122","123"],"D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\movies\\Movie.tsx",["124","125","126","127","128","129"],"import React from 'react';\r\nimport {\r\n    IonCard, IonCardContent,\r\n    IonCardHeader,\r\n    IonCardSubtitle, IonCardTitle,\r\n    IonContent,\r\n    IonHeader,\r\n    IonImg,\r\n    IonItem,\r\n    IonLabel,\r\n    IonTitle\r\n} from '@ionic/react';\r\nimport {MovieProps} from './MovieProps';\r\n\r\ninterface MoviePropsExt extends MovieProps {\r\n    onEdit: (_id?: string) => void;\r\n}\r\n\r\nconst Movie: React.FC<MoviePropsExt> = ({_id, name,\r\n                                            language, manager,\r\n                                            year, photoPath,\r\n                                            lat, lng, onEdit}) => {\r\n    return (\r\n        <IonItem onClick={() => onEdit(_id)}>\r\n            <IonCard>\r\n                <img alt=\"NO PHOTO\" src={photoPath} />\r\n                <IonCardHeader>\r\n                    <IonCardTitle>{name}</IonCardTitle>\r\n                    <IonCardSubtitle>{language}</IonCardSubtitle>\r\n                </IonCardHeader>\r\n                <IonCardContent>\r\n                    Movie with id {_id}, name {name}, language {language}, manager {manager}, year {year}, lat: {lat}, lng: {lng}\r\n                </IonCardContent>\r\n            </IonCard>\r\n        </IonItem>\r\n    );\r\n};\r\n\r\nexport default Movie;\r\n","D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\movies\\scooterApi.tsx",[],"D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\network\\useNetwork.tsx",[],"D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\auth\\AuthProvider.tsx",["130","131","132","133"],"import React, {useCallback, useEffect, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {getLogger} from '../core';\r\nimport {login as loginApi} from './authApi';\r\nimport {Plugins} from \"@capacitor/core\";\r\n\r\nconst log = getLogger('AuthProvider');\r\n\r\ntype LoginFn = (username?: string, password?: string) => void;\r\ntype TokenFn = (token?: string) => void;\r\ntype LogoutFn = () => void;\r\n\r\nexport interface AuthState {\r\n    authenticationError: Error | null;\r\n    isAuthenticated: boolean;\r\n    isAuthenticating: boolean;\r\n    login?: LoginFn;\r\n    setToken?: TokenFn;\r\n    logout?: LogoutFn;\r\n    pendingAuthentication?: boolean;\r\n    username?: string;\r\n    password?: string;\r\n    token: string;\r\n}\r\n\r\nconst initialState: AuthState = {\r\n    isAuthenticated: false,\r\n    isAuthenticating: false,\r\n    authenticationError: null,\r\n    pendingAuthentication: false,\r\n    token: '',\r\n};\r\n\r\nexport const AuthContext = React.createContext<AuthState>(initialState);\r\n\r\ninterface AuthProviderProps {\r\n    children: PropTypes.ReactNodeLike,\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({children}) => {\r\n    const { Storage } = Plugins;\r\n    const [state, setState] = useState<AuthState>(initialState);\r\n    const {isAuthenticated, isAuthenticating, authenticationError, pendingAuthentication, token} = state;\r\n    const login = useCallback<LoginFn>(loginCallback, []);\r\n    const logout = useCallback<LogoutFn>(logoutCallback, []);\r\n    useEffect(authenticationEffect, [pendingAuthentication]);\r\n    const value = {isAuthenticated, login, isAuthenticating, authenticationError, token, logout, setToken};\r\n    log('render');\r\n\r\n    useEffect(() => {\r\n        const onUseEffect = async () => {\r\n            const res = await Storage.get({key: 'token'});\r\n            if (res.value) {\r\n                setState({\r\n                    ...state,\r\n                    isAuthenticated: true,\r\n                });\r\n            }\r\n        }\r\n        onUseEffect().then();\r\n    }, [])\r\n\r\n    return (\r\n        <AuthContext.Provider value={value}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n\r\n    function logoutCallback(): void {\r\n        log('logout');\r\n        removeFromStorage().then();\r\n        setState({\r\n            ...state,\r\n            isAuthenticated: false,\r\n            isAuthenticating: false,\r\n            token: ''\r\n        });\r\n\r\n        async function removeFromStorage() {\r\n           await Storage.remove({'key': 'movies'});\r\n        }\r\n    }\r\n\r\n    function setToken(token?: string): void {\r\n        if (token)\r\n            setState({\r\n                ...state,\r\n                token\r\n            });\r\n    }\r\n\r\n    function loginCallback(username?: string, password?: string): void {\r\n        log('login');\r\n        setState({\r\n            ...state,\r\n            pendingAuthentication: true,\r\n            username,\r\n            password\r\n        });\r\n    }\r\n\r\n    function authenticationEffect() {\r\n        let canceled = false;\r\n        authenticate();\r\n        return () => {\r\n            canceled = true;\r\n        }\r\n\r\n        async function authenticate() {\r\n            if (!pendingAuthentication) {\r\n                log('authenticate, !pendingAuthentication, return');\r\n                return;\r\n            }\r\n            try {\r\n                log('authenticate...');\r\n                setState({\r\n                    ...state,\r\n                    isAuthenticating: true,\r\n                });\r\n                const {username, password} = state;\r\n                const {token} = await loginApi(username, password);\r\n                await Storage.set({key: 'token', value: token});\r\n                if (canceled) {\r\n                    return;\r\n                }\r\n                log('authenticate succeeded');\r\n                setState({\r\n                    ...state,\r\n                    token,\r\n                    pendingAuthentication: false,\r\n                    isAuthenticated: true,\r\n                    isAuthenticating: false,\r\n                });\r\n            } catch (error) {\r\n                if (canceled) {\r\n                    return;\r\n                }\r\n                log('authenticate failed');\r\n                setState({\r\n                    ...state,\r\n                    authenticationError: error,\r\n                    pendingAuthentication: false,\r\n                    isAuthenticating: false,\r\n                });\r\n            }\r\n        }\r\n    }\r\n};\r\n","D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\auth\\Login.tsx",["134"],"import React, {useContext, useState} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {RouteComponentProps} from 'react-router';\r\nimport {\r\n    IonButton,\r\n    IonContent,\r\n    IonHeader,\r\n    IonInput,\r\n    IonLoading,\r\n    IonPage,\r\n    IonTitle,\r\n    IonToolbar,\r\n    useIonRouter\r\n} from '@ionic/react';\r\nimport {AuthContext} from './AuthProvider';\r\nimport {getLogger} from '../core';\r\nimport {useNetwork} from \"../network/useNetwork\";\r\n\r\nconst log = getLogger('Login');\r\n\r\ninterface LoginState {\r\n    username?: string;\r\n    password?: string;\r\n}\r\n\r\nexport const Login: React.FC<RouteComponentProps> = ({history}) => {\r\n    const { networkStatus } = useNetwork();\r\n    const {isAuthenticated, isAuthenticating, login, authenticationError} = useContext(AuthContext);\r\n    const [state, setState] = useState<LoginState>({});\r\n    const {username, password} = state;\r\n    const handleLogin = () => {\r\n        log('handleLogin...');\r\n        login?.(username, password);\r\n    };\r\n    log('render');\r\n\r\n    return !isAuthenticated ? (<IonPage>\r\n            <IonHeader>\r\n                <IonToolbar>\r\n                    <IonTitle>Login</IonTitle>\r\n                    <div>Network status is {JSON.stringify(networkStatus)}</div>\r\n                </IonToolbar>\r\n            </IonHeader>\r\n            <IonContent>\r\n                <IonInput\r\n                    placeholder=\"Username\"\r\n                    value={username}\r\n                    onIonChange={e => setState({\r\n                        ...state,\r\n                        username: e.detail.value || ''\r\n                    })}/>\r\n                <IonInput\r\n                    placeholder=\"Password\"\r\n                    value={password}\r\n                    onIonChange={e => setState({\r\n                        ...state,\r\n                        password: e.detail.value || ''\r\n                    })}/>\r\n                <IonLoading isOpen={isAuthenticating}/>\r\n                {authenticationError && (\r\n                    <div>{authenticationError.message || 'Failed to authenticate'}</div>\r\n                )}\r\n                <IonButton onClick={handleLogin}>Login</IonButton>\r\n            </IonContent>\r\n        </IonPage>\r\n    ) : <Redirect to={{pathname: '/items'}}/>;\r\n};\r\n","D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\auth\\PrivateRoute.tsx",[],"D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\core\\index.tsx",[],"D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\auth\\authApi.tsx",[],["135","136"],"D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\todo\\usePhotoGallery.ts",["137","138","139"],"import {useCamera} from '@ionic/react-hooks/camera';\r\nimport {CameraPhoto, CameraResultType, CameraSource, FilesystemDirectory, Plugins} from '@capacitor/core';\r\nimport {useEffect, useState} from 'react';\r\nimport {base64FromPath, useFilesystem} from '@ionic/react-hooks/filesystem';\r\nimport {useStorage} from '@ionic/react-hooks/storage';\r\n\r\nexport interface Photo {\r\n    filepath: string;\r\n    webviewPath?: string;\r\n}\r\n\r\nconst PHOTO_STORAGE = 'photos';\r\n\r\nexport function usePhotoGallery() {\r\n    const {getPhoto} = useCamera();\r\n    const [photos, setPhotos] = useState<Photo[]>([]);\r\n    const [flag, setFlag] = useState(false);\r\n    const {deleteFile, readFile, writeFile} = useFilesystem();\r\n    const {get, set} = useStorage();\r\n    const {Storage} = Plugins;\r\n\r\n    const takePhoto = async () => {\r\n        const cameraPhoto = await getPhoto({\r\n            resultType: CameraResultType.Uri,\r\n            source: CameraSource.Camera,\r\n            quality: 100\r\n        });\r\n        const fileName = new Date().getTime() + '.jpeg';\r\n        const savedFileImage = await savePicture(cameraPhoto, fileName);\r\n        console.log(\"picture: \" + JSON.stringify(savedFileImage));\r\n        const newPhotos = [savedFileImage, ...photos];\r\n        setPhotos(newPhotos);\r\n        set(PHOTO_STORAGE, JSON.stringify(newPhotos));\r\n        return savedFileImage;\r\n    };\r\n\r\n    const savePicture = async (photo: CameraPhoto, fileName: string): Promise<Photo> => {\r\n        const base64Data = await base64FromPath(photo.webPath!);\r\n        await writeFile({\r\n            path: fileName,\r\n            data: base64Data,\r\n            directory: FilesystemDirectory.Data\r\n        });\r\n\r\n        return {\r\n            filepath: fileName,\r\n            webviewPath: photo.webPath\r\n        };\r\n    };\r\n\r\n    useEffect(() => {\r\n        loadSaved();\r\n    }, [get, readFile]);\r\n\r\n    const loadSaved = async () => {\r\n        const photosString = await get(PHOTO_STORAGE);\r\n        const photosFromStorage = (photosString ? JSON.parse(photosString) : []) as Photo[];\r\n        console.log('load ', photosFromStorage)\r\n        for (let photo of photosFromStorage) {\r\n            const file = await readFile({\r\n                path: photo.filepath,\r\n                directory: FilesystemDirectory.Data\r\n            });\r\n            photo.webviewPath = `data:image/jpeg;base64,${file.data}`;\r\n        }\r\n\r\n        setPhotos(photosFromStorage);\r\n        await Storage.set({'key': 'photo', 'value': JSON.stringify(photosFromStorage)})\r\n    };\r\n\r\n    const deletePhoto = async (photo: Photo) => {\r\n        const newPhotos = photos.filter(p => p.filepath !== photo.filepath);\r\n        set(PHOTO_STORAGE, JSON.stringify(newPhotos));\r\n        const filename = photo.filepath.substr(photo.filepath.lastIndexOf('/') + 1);\r\n        await deleteFile({\r\n            path: filename,\r\n            directory: FilesystemDirectory.Data\r\n        });\r\n        setPhotos(newPhotos);\r\n    };\r\n\r\n    return {\r\n        photos,\r\n        takePhoto,\r\n        deletePhoto,\r\n        loadSaved\r\n    };\r\n}","D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\movies\\Home2.tsx",[],"D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\todo\\MyMap.tsx",[],"D:\\Facultate\\PDM\\lab2\\lab2ionic_v3\\src\\todo\\mapsApiKey.ts",[],{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","severity":1,"message":"145","line":2,"column":10,"nodeType":"146","messageId":"147","endLine":2,"endColumn":18},{"ruleId":"144","severity":1,"message":"148","line":11,"column":5,"nodeType":"146","messageId":"147","endLine":11,"endColumn":13},{"ruleId":"144","severity":1,"message":"149","line":14,"column":28,"nodeType":"146","messageId":"147","endLine":14,"endColumn":37},{"ruleId":"144","severity":1,"message":"150","line":22,"column":9,"nodeType":"146","messageId":"147","endLine":22,"endColumn":16},{"ruleId":"144","severity":1,"message":"151","line":23,"column":9,"nodeType":"146","messageId":"147","endLine":23,"endColumn":14},{"ruleId":"144","severity":1,"message":"152","line":28,"column":20,"nodeType":"146","messageId":"147","endLine":28,"endColumn":29},{"ruleId":"144","severity":1,"message":"153","line":28,"column":31,"nodeType":"146","messageId":"147","endLine":28,"endColumn":42},{"ruleId":"144","severity":1,"message":"154","line":31,"column":23,"nodeType":"146","messageId":"147","endLine":31,"endColumn":35},{"ruleId":"144","severity":1,"message":"155","line":33,"column":35,"nodeType":"146","messageId":"147","endLine":33,"endColumn":59},{"ruleId":"144","severity":1,"message":"156","line":19,"column":18,"nodeType":"146","messageId":"147","endLine":19,"endColumn":26},{"ruleId":"144","severity":1,"message":"157","line":39,"column":12,"nodeType":"146","messageId":"147","endLine":39,"endColumn":25},{"ruleId":"144","severity":1,"message":"153","line":43,"column":31,"nodeType":"146","messageId":"147","endLine":43,"endColumn":42},{"ruleId":"144","severity":1,"message":"158","line":43,"column":44,"nodeType":"146","messageId":"147","endLine":43,"endColumn":53},{"ruleId":"159","severity":1,"message":"160","line":50,"column":45,"nodeType":"161","messageId":"162","endLine":50,"endColumn":47},{"ruleId":"163","severity":1,"message":"164","line":65,"column":8,"nodeType":"165","endLine":65,"endColumn":25,"suggestions":"166"},{"ruleId":"144","severity":1,"message":"167","line":5,"column":22,"nodeType":"146","messageId":"147","endLine":5,"endColumn":31},{"ruleId":"144","severity":1,"message":"168","line":7,"column":9,"nodeType":"146","messageId":"147","endLine":7,"endColumn":13},{"ruleId":"144","severity":1,"message":"169","line":10,"column":8,"nodeType":"146","messageId":"147","endLine":10,"endColumn":13},{"ruleId":"144","severity":1,"message":"170","line":46,"column":7,"nodeType":"146","messageId":"147","endLine":46,"endColumn":16},{"ruleId":"163","severity":1,"message":"171","line":90,"column":66,"nodeType":"165","endLine":90,"endColumn":73,"suggestions":"172"},{"ruleId":"144","severity":1,"message":"173","line":92,"column":13,"nodeType":"146","messageId":"147","endLine":92,"endColumn":26},{"ruleId":"163","severity":1,"message":"174","line":108,"column":8,"nodeType":"165","endLine":108,"endColumn":10,"suggestions":"175"},{"ruleId":"144","severity":1,"message":"176","line":132,"column":14,"nodeType":"146","messageId":"147","endLine":132,"endColumn":33},{"ruleId":"144","severity":1,"message":"177","line":150,"column":20,"nodeType":"146","messageId":"147","endLine":150,"endColumn":38},{"ruleId":"159","severity":1,"message":"178","line":234,"column":30,"nodeType":"161","messageId":"162","endLine":234,"endColumn":32},{"ruleId":"159","severity":1,"message":"178","line":288,"column":30,"nodeType":"161","messageId":"162","endLine":288,"endColumn":32},{"ruleId":"144","severity":1,"message":"179","line":305,"column":27,"nodeType":"146","messageId":"147","endLine":305,"endColumn":39},{"ruleId":"140","replacedBy":"180"},{"ruleId":"142","replacedBy":"181"},{"ruleId":"144","severity":1,"message":"182","line":6,"column":5,"nodeType":"146","messageId":"147","endLine":6,"endColumn":15},{"ruleId":"144","severity":1,"message":"183","line":7,"column":5,"nodeType":"146","messageId":"147","endLine":7,"endColumn":14},{"ruleId":"144","severity":1,"message":"184","line":8,"column":5,"nodeType":"146","messageId":"147","endLine":8,"endColumn":11},{"ruleId":"144","severity":1,"message":"185","line":10,"column":5,"nodeType":"146","messageId":"147","endLine":10,"endColumn":13},{"ruleId":"144","severity":1,"message":"148","line":11,"column":5,"nodeType":"146","messageId":"147","endLine":11,"endColumn":13},{"ruleId":"186","severity":1,"message":"187","line":26,"column":17,"nodeType":"188","endLine":26,"endColumn":55},{"ruleId":"163","severity":1,"message":"189","line":44,"column":55,"nodeType":"165","endLine":44,"endColumn":57,"suggestions":"190"},{"ruleId":"163","severity":1,"message":"191","line":45,"column":58,"nodeType":"165","endLine":45,"endColumn":60,"suggestions":"192"},{"ruleId":"163","severity":1,"message":"193","line":46,"column":37,"nodeType":"165","endLine":46,"endColumn":60,"suggestions":"194"},{"ruleId":"163","severity":1,"message":"193","line":61,"column":8,"nodeType":"165","endLine":61,"endColumn":10,"suggestions":"195"},{"ruleId":"144","severity":1,"message":"196","line":13,"column":5,"nodeType":"146","messageId":"147","endLine":13,"endColumn":17},{"ruleId":"140","replacedBy":"197"},{"ruleId":"142","replacedBy":"198"},{"ruleId":"144","severity":1,"message":"199","line":17,"column":12,"nodeType":"146","messageId":"147","endLine":17,"endColumn":16},{"ruleId":"144","severity":1,"message":"200","line":17,"column":18,"nodeType":"146","messageId":"147","endLine":17,"endColumn":25},{"ruleId":"163","severity":1,"message":"201","line":53,"column":8,"nodeType":"165","endLine":53,"endColumn":23,"suggestions":"202"},"no-native-reassign",["203"],"no-negated-in-lhs",["204"],"@typescript-eslint/no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'IonTitle' is defined but never used.","'useEffect' is defined but never used.","'Plugins' is defined but never used.","'Photo' is defined but never used.","'takePhoto' is assigned a value but never used.","'deletePhoto' is assigned a value but never used.","'setLanguages' is assigned a value but never used.","'setDisableInfiniteScroll' is assigned a value but never used.","'usePhoto' is defined but never used.","'photoToDelete' is assigned a value but never used.","'loadSaved' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getPhotoView' and 'movies'. Either include them or remove the dependency array.","ArrayExpression",["205"],"'getMovies' is defined but never used.","'save' is defined but never used.","'movie' is defined but never used.","'PAGE_SIZE' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'Storage'. Either include it or remove the dependency array.",["206"],"'networkStatus' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchMovies'. Either include it or remove the dependency array.",["207"],"'getItemsFromStorage' is defined but never used.","'saveMovieInStorage' is defined but never used.","Expected '!==' and instead saw '!='.","'storageItems' is assigned a value but never used.",["203"],["204"],"'IonContent' is defined but never used.","'IonHeader' is defined but never used.","'IonImg' is defined but never used.","'IonLabel' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","React Hook useCallback has a missing dependency: 'state'. Either include it or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.",["208"],"React Hook useCallback has missing dependencies: 'Storage' and 'state'. Either include them or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.",["209"],"React Hook useEffect has missing dependencies: 'Storage' and 'state'. Either include them or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.",["210"],["211"],"'useIonRouter' is defined but never used.",["203"],["204"],"'flag' is assigned a value but never used.","'setFlag' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadSaved'. Either include it or remove the dependency array.",["212"],"no-global-assign","no-unsafe-negation",{"desc":"213","fix":"214"},{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},{"desc":"221","fix":"225"},{"desc":"226","fix":"227"},"Update the dependencies array to be: [getPhotoView, match.params.id, movies]",{"range":"228","text":"229"},"Update the dependencies array to be: [Storage]",{"range":"230","text":"231"},"Update the dependencies array to be: [fetchMovies]",{"range":"232","text":"233"},"Update the dependencies array to be: [state]",{"range":"234","text":"235"},"Update the dependencies array to be: [Storage, state]",{"range":"236","text":"237"},"Update the dependencies array to be: [Storage, pendingAuthentication, state]",{"range":"238","text":"239"},{"range":"240","text":"237"},"Update the dependencies array to be: [get, loadSaved, readFile]",{"range":"241","text":"242"},[2339,2356],"[getPhotoView, match.params.id, movies]",[3365,3372],"[Storage]",[3949,3951],"[fetchMovies]",[1393,1395],"[state]",[1456,1458],"[Storage, state]",[1498,1521],"[Storage, pendingAuthentication, state]",[2000,2002],[1839,1854],"[get, loadSaved, readFile]"]